#
# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Jersey API - my.service::jersey-sample
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    BinaryMediaTypes:
      - "*/*"
Resources:
  NessieGitObjectDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: NessieGitObjectDatabase
  NessieGitRefDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: uuid
          AttributeType: S
      KeySchema:
        - AttributeName: uuid
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: NessieGitRefDatabase
  NessieAdminRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nessie-admin-policy
      Groups:
        - !Ref NessieAdminGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'execute-api:Invoke'
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':*:'
                - !Ref JerseyNessieApiGateway
                - '/Prod/*/api/v1/{proxy+}'
  NessieUserRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: nessie-user-policy
      Groups:
        - !Ref NessieUserGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'execute-api:Invoke'
            Resource: !Join
              - ''
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':*:'
                - !Ref JerseyNessieApiGateway
                - '/Prod/GET/api/v1/{proxy+}'
  NessieAdminGroup:
    Type: AWS::IAM::Group
  NessieUserGroup:
    Type: AWS::IAM::Group
  NessieDynamoDbRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NessieDynamodbAccessRole
      Roles:
        - !Ref JerseyNessieFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !Join
                - ''
                - - 'arn:aws:dynamodb:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':table/NessieGitObjectDatabase'
              - !Join
                - ''
                - - 'arn:aws:dynamodb:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':table/NessieGitRefDatabase'
  JerseyNessieFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: NessieLambdaRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  JerseyNessieApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: CALLER_CREDENTIALS
  JerseyNessieFunction:
    Type: AWS::Serverless::Function
    DependsOn: JerseyNessieFunctionRole
    Properties:
      Handler: org.projectnessie.serverless.NessieLambda::handleRequest
      Runtime: provided
      CodeUri: target/function.zip
      MemorySize: 128
      Role: !GetAtt JerseyNessieFunctionRole.Arn
      Timeout: 60
      Environment:
        Variables:
          DISABLE_SIGNAL_HANDLERS: true
          NESSIE_DB_PROPS_REGION: !Ref AWS::Region
          NESSIE_DB_PROPS_ENDPOINT: !Sub https://dynamodb.${AWS::Region}.amazonaws.com
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref JerseyNessieApiGateway
            Path: /api/v1/{proxy+}
            Method: get
        PutResource:
          Type: Api
          Properties:
            RestApiId: !Ref JerseyNessieApiGateway
            Path: /api/v1/{proxy+}
            Method: put
        PostResource:
          Type: Api
          Properties:
            RestApiId: !Ref JerseyNessieApiGateway
            Path: /api/v1/{proxy+}
            Method: post
        DeleteResource:
          Type: Api
          Properties:
            RestApiId: !Ref JerseyNessieApiGateway
            Path: /api/v1/{proxy+}
            Method: delete
Outputs:
  JerseyNessieApi:
    Description: URL for application
    Value: !Sub 'https://${JerseyNessieApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/v1/'
