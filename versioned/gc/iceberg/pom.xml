<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2020 Dremio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.projectnessie</groupId>
    <artifactId>nessie-versioned-gc-parent</artifactId>
    <version>0.4.1-SNAPSHOT</version>
  </parent>

  <artifactId>nessie-versioned-gc-iceberg</artifactId>
  <packaging>jar</packaging>

  <name>Nessie - Versioned - GC for Spark - Iceberg</name>

  <dependencies>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-gc</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-server-store</artifactId>
      <version>${project.version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.iceberg</groupId>
      <artifactId>iceberg-spark3-runtime</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_2.12</artifactId>
      <version>3.0.1</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_2.12</artifactId>
      <version>${spark3.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-tiered-gc</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-tiered-gc</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-tests</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-tiered-dynamodb</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectnessie</groupId>
      <artifactId>nessie-versioned-tiered-dynamodb</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>DynamoDBLocal</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <repositories>
    <repository>
      <id>dynamodb-local</id>
      <name>DynamoDB Local Release Repository</name>
      <url>${dynamodb-local.repository.url}</url>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>com.bazaarvoice.maven.plugins</groupId>
        <artifactId>process-exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals><goal>start</goal></goals>
            <configuration>
              <name>dynamolocal</name>
              <waitAfterLaunch>1</waitAfterLaunch>
              <workingDir>${project.basedir}</workingDir>
              <arguments>
                <argument>java</argument>
                <argument>-Djava.library.path=${project.build.directory}/native-libraries</argument>
                <argument>-classpath</argument>
                <argument>${project.build.directory}/dynamo-libraries/*</argument>
                <argument>com.amazonaws.services.dynamodbv2.local.main.ServerRunner</argument>
                <argument>-port</argument>
                <argument>8000</argument>
                <argument>-inMemory</argument>
              </arguments>
            </configuration>
          </execution>
          <execution>
            <id>stop-all</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop-all</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <systemPropertyVariables>
            <quarkus.http.test-port>${quarkus.http.test-port}</quarkus.http.test-port>
            <aws.accessKeyId>xxx</aws.accessKeyId>
            <aws.secretAccessKey>xxx</aws.secretAccessKey>
            <sqlite4java.library.path>${project.build.directory}/native-libraries</sqlite4java.library.path>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-native-libraries</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/native-libraries</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
              <includeTypes>dll,so,dylib</includeTypes>
            </configuration>
          </execution>
          <execution>
            <id>copy-dynamo-libraries</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dynamo-libraries</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
              <includeGroupIds>com.amazonaws,com.google.guava,commons-cli,org.apache.commons,org.eclipse.jetty,org.apache.logging.log4j,com.fasterxml,com.almworks,org.antlr</includeGroupIds>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.projectnessie</groupId>
        <artifactId>nessie-apprunner-maven-plugin</artifactId>
        <version>${project.version}</version>
        <configuration>
          <skip>${skipTests}</skip>
          <appArtifactId>org.projectnessie:nessie-quarkus:${project.version}</appArtifactId>
          <applicationProperties>
            <quarkus.http.test-port>0</quarkus.http.test-port>
            <nessie.version.store.dynamo.initialize>true</nessie.version.store.dynamo.initialize>
            <nessie.version.store.type>DYNAMO</nessie.version.store.type>
            <quarkus.dynamodb.endpoint.override>http://localhost:8000</quarkus.dynamodb.endpoint.override>
            <quarkus.dynamodb.aws.region>us-west-2</quarkus.dynamodb.aws.region>
          </applicationProperties>
          <systemProperties>
            <aws.accessKeyId>xxx</aws.accessKeyId>
            <aws.secretAccessKey>xxx</aws.secretAccessKey>
          </systemProperties>
          <outputProperties>
            <quarkus.http.test-port>quarkus.http.test-port</quarkus.http.test-port>
          </outputProperties>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.projectnessie</groupId>
            <artifactId>nessie-quarkus</artifactId>
            <version>${project.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>start</id>
            <phase>pre-integration-test</phase>
            <goals><goal>start</goal></goals>
          </execution>
          <execution>
            <id>stop</id>
            <phase>post-integration-test</phase>
            <goals><goal>stop</goal></goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protoSourceRoot>${basedir}/src/main/proto</protoSourceRoot>
          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/generated-sources/protobuf</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <activation>
        <os><family>unix</family></os>
      </activation>
      <id>linux</id>
      <dependencies>
        <dependency>
          <groupId>com.almworks.sqlite4java</groupId>
          <artifactId>libsqlite4java-linux-amd64</artifactId>
          <type>so</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <activation>
        <os><family>mac</family></os>
      </activation>
      <id>mac</id>
      <dependencies>
        <dependency>
          <groupId>com.almworks.sqlite4java</groupId>
          <artifactId>libsqlite4java-osx</artifactId>
          <type>dylib</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <activation>
        <os><family>windows</family></os>
      </activation>
      <id>windows</id>
      <dependencies>
        <dependency>
          <groupId>com.almworks.sqlite4java</groupId>
          <artifactId>sqlite4java-win32-x64</artifactId>
          <type>dll</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
