/*
 * Copyright (C) 2020 Dremio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package org.projectnessie.versioned.rocksdb;

option java_package = "org.projectnessie.versioned.rocksdb";
option java_outer_classname = "ValueProtos";
option java_generate_equals_and_hash = true;

message BaseValue {
  bytes id = 1;
  int64 datetime = 2;
}

message WrappedValue {
  BaseValue base = 1;
  bytes value = 2;
}

message Key {
  repeated string elements = 1;
}

message KeyDelta {
  Key key = 1;
  bytes id = 2;
}

message KeyMutation {
  enum MutationType {
    ADDITION = 0;
    REMOVAL = 1;
  }
  MutationType type = 1;
  Key key = 2;
}

message Delta {
  int32 position = 1;
  bytes old_id = 2;
  bytes new_id = 3;
}

message Commit {
  bytes id = 1;
  bytes commit = 2;
  bytes parent = 3;
  repeated Delta delta = 4;
  repeated KeyMutation key_mutation = 5;
}

message Tag {
  bytes id = 1;
}

message Branch {
  repeated Commit commits = 5;
  repeated bytes children = 6;
  bytes metadata_id = 7;
}

message Ref {
  BaseValue base = 1;
  string name = 2;
  oneof ref_value {
    Tag tag = 3;
    Branch branch = 4;
  }
}

message Fragment {
  BaseValue base = 1;
  repeated Key keys = 2;
}

message IncrementalList {
  bytes checkpoint_id = 1;
  int32 distance_from_checkpoint_id = 2;
}

message CompleteList {
  repeated bytes fragment_ids = 1;
}

message L1 {
  BaseValue base = 1;
  bytes metadata_id = 2;
  repeated bytes ancestors = 3;
  repeated bytes tree = 4;
  repeated KeyMutation key_mutations = 5;
  oneof list {
    IncrementalList incremental_list = 6;
    CompleteList complete_list = 7;
  };
}

message L2 {
  BaseValue base = 1;
  repeated bytes tree = 2;
}

message L3 {
  BaseValue base = 1;
  repeated KeyDelta key_delta = 2;
}
